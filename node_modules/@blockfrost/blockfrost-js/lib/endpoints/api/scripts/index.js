"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scriptRedeemers = exports.scriptDatum = exports.scriptCbor = exports.scriptJson = exports.scripts = exports.script = void 0;
const utils_1 = require("../../../utils");
const errors_1 = require("../../../utils/errors");
async function script(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.script = script;
async function scripts(pagination) {
    const paginationOptions = (0, utils_1.getPaginationOptions)(pagination);
    return new Promise((resolve, reject) => {
        this.instance(`scripts`, {
            searchParams: {
                page: paginationOptions.page,
                count: paginationOptions.count,
                order: paginationOptions.order,
            },
        })
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scripts = scripts;
async function scriptJson(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}/json`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptJson = scriptJson;
async function scriptCbor(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}/cbor`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptCbor = scriptCbor;
async function scriptDatum(datumHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/datum/${datumHash}`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptDatum = scriptDatum;
async function scriptRedeemers(scriptHash) {
    return new Promise((resolve, reject) => {
        this.instance(`scripts/${scriptHash}/redeemers`)
            .then(resp => {
            resolve(resp.body);
        })
            .catch(err => {
            reject((0, errors_1.handleError)(err));
        });
    });
}
exports.scriptRedeemers = scriptRedeemers;
